/* 计科 2353761 王皙晶 */

/* 函数实现部分，{ }内的东西可以任意调整，目前的return 0只是一个示例，可改变 */

/* 不允许定义任何形式的外部全局、静态全局、宏定义、只读变量 */

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlen(const char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int count = 0,i=0;
    while (str[i] != '\0') {
        ++count;
        ++i;
    }
    return count; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcat(char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i,j=0;
    i = tj_strlen(s1);
    j = tj_strlen(s2);
    for (int k = 0; k <= j; ++k) {
        s1[i + k ] = s2[k];
    }//已经写入\0
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncat(char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0,j=0,k=0,l=0;
    i = tj_strlen(s1);
    l = tj_strlen(s2);
    if (len > l) {
        for (j = 0; j < l ; ++j) {
            s1[i + j] = s2[j];
        }
        s1[i + l] = '\0';
    }
    else {
        for (j = 0; j < len; ++j) {
            s1[i + j] = s2[j];
        }
        s1[len + i] = '\0';
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcpy(char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    i = tj_strlen(s2);
    for (int j = 0; j < i; ++j) {
        s1[j] = s2[j];
    }
    s1[i] = '\0';
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncpy(char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0, j = 0, k = 0, l = 0;
    i = tj_strlen(s1);
    l = tj_strlen(s2);
    if (len > l) {
        for (j = 0; j < l; ++j) {
            s1[j] = s2[j];
        }
    }
    else {
        for (j = 0; j < len; ++j) {
            s1[j] = s2[j];
        }
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcmp(const char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0,j = 0,min=0,sub=0;
    i = tj_strlen(s1);
    j = tj_strlen(s2);
    min = i > j ? j : i;
    for (int k = 0; k < min+1; ++k) {
        sub = int(s1[k]) - int(s2[k]);
        if (sub != 0) {
            break;
        }
    }
    return sub;//return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasecmp(const char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0, j = 0, min = 0, sub = 0;
    i = tj_strlen(s1);
    j = tj_strlen(s2);
    min = i > j ? j : i;
    for (int k = 0; k < min + 1; ++k) {
        if ((s1[k] > 'a' && s1[k] < 'z') || (s1[k] > 'A' && s1[k] < 'Z')) {
            if (s1[k] > 'A' && s1[k] < 'Z') {
                sub = sub + 'a'-'A';
            }
        }
        if ((s2[k] > 'a' && s2[k] < 'z') || (s2[k] > 'A' && s2[k] < 'Z')) {
            if (s2[k] > 'A' && s2[k] < 'Z') {
                sub = sub - 'a'+'A';
            }
        }
        sub = sub+int(s1[k]) - int(s2[k]);
        if (sub != 0) {
            break;
        }
    }
    return sub; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncmp(const char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0, j = 0, min = 0, sub = 0;
    i = tj_strlen(s1);
    j = tj_strlen(s2);
    min = i > j ? j : i;
    if (len > min) {
        for (int k = 0; k < min + 1; ++k) {
            sub = int(s1[k]) - int(s2[k]);
            if (sub != 0) {
                break;
            }
        }
    }
    else {
        for (int k = 0; k < len; ++k) {
            sub = int(s1[k]) - int(s2[k]);
            if (sub != 0) {
                break;
            }
        }
    }
    return sub;//return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasencmp(const char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0, j = 0, min = 0, sub = 0;
    i = tj_strlen(s1);
    j = tj_strlen(s2);
    min = i > j ? j : i;
    if (len > min) {
        for (int k = 0; k < min + 1; ++k) {
            if ((s1[k] > 'a' && s1[k] < 'z') || (s1[k] > 'A' && s1[k] < 'Z')) {
                if (s1[k] > 'A' && s1[k] < 'Z') {
                    sub = sub + 'a' - 'A';
                }
            }
            if ((s2[k] > 'a' && s2[k] < 'z') || (s2[k] > 'A' && s2[k] < 'Z')) {
                if (s2[k] > 'A' && s2[k] < 'Z') {
                    sub = sub - 'a' + 'A';
                }
            }
            sub = sub + int(s1[k]) - int(s2[k]);
            if (sub != 0) {
                break;
            }
        }
    }
    else {
        for (int k = 0; k <len; ++k) {
            if ((s1[k] > 'a' && s1[k] < 'z') || (s1[k] > 'A' && s1[k] < 'Z')) {
                if (s1[k] > 'A' && s1[k] < 'Z') {
                    sub = sub + 'a' - 'A';
                }
            }
            if ((s2[k] > 'a' && s2[k] < 'z') || (s2[k] > 'A' && s2[k] < 'Z')) {
                if (s2[k] > 'A' && s2[k] < 'Z') {
                    sub = sub - 'a' + 'A';
                }
            }
            sub = sub + int(s1[k]) - int(s2[k]);
            if (sub != 0) {
                break;
            }
        }
    }
    return sub; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strupr(char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i;
    i = tj_strlen(str);
    for (int k = 0; k < i; ++k) {
        if (str[k] >= 'a' && str[k] <= 'z') {
            str[k] = str[k] - 32;
        }
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlwr(char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i;
    i = tj_strlen(str);
    for (int k = 0; k < i; ++k) {
        if (str[k] >= 'A' && str[k] <= 'Z') {
            str[k] = str[k] + 32;
        }
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strchr(const char str[], char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i,j;
    i = tj_strlen(str);
    for (j = 0; j < i; ++j) {
        if (str[j] == ch) {
            return j + 1;
        }
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strstr(const char str[], const char substr[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i, j, k=-1,q=0;
    i = tj_strlen(str);
    j = tj_strlen(substr);
    for (int m = 0; m < i; ++m) {
        if (str[m] == substr[0]) {
            for (int l = m; l < m + j; ++l) {
                if (str[l] != substr[q]) {
                    break;
                }
                else {
                    ++q;
                }
            }
            if (q == j) {
                k = m;
                break;
            }
            else {
                q = 0;
            }
        }
    }
    return k+1; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrchr(const char str[], const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i, j;
    i = tj_strlen(str);
    for (j = i; j >= 0; --j) {
        if (str[j] == ch) {
            return j + 1;
        }
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrstr(const char str[], const char substr[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i, j, k = -1, q = 0;
    i = tj_strlen(str);
    j = tj_strlen(substr);
    for (int m = i; m >= 0; --m) {
        if (str[m] == substr[0]) {
            for (int l = m; l < m + j; ++l) {
                if (str[l] != substr[q]) {
                    break;
                }
                else {
                    ++q;
                }
            }
            if (q == j) {
                k = m;
                break;
            }
            else {
                q = 0;
            }
        }
    }
    return k + 1; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrev(char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i, j = 0;
    char tmp1;
    i = tj_strlen(str);
    for (int l = 0; l < i; ++l) {
        tmp1 = str[i - 1];
        for (int k = i - 2; k >= l; --k) {
            str[k + 1] = str[k];
        }//后挪一个
        str[l] = tmp1;
    }
    return 0; //return值可根据需要修改
}
